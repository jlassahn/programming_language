
janus 1.0;


# a Janus souce file is UTF-8 text

def str = "Hello, World";
# a string literal has type MArray(UInt8, length)
# so here, str has type MArray(UInt8, 12)

def str2 StringObj = str;
# not used in practice very often
# StringObj is an alias for Array(UInt8)
# defined like this:
# alias StringObj Array(UInt8) implements String;

def str3 String = str;
# String is an interface implemented by StringObj
# which might also be implemented by other types
# to create custom string-like objects


# concatenation
def x String = "one string " + "two strings";
def y String = "head " + x + " tail";
# operator acts like
# add(>String, >String) -> String
# and allocates new StringObj for result

# function calls
def fn(x String);
x = fn("literal");

# misc string operations
x.ToUpper();

# this doesn't have to work:
# "lower".ToUpper();

# iterators
for c = x.Chars() { }


# machine Janus operations
#
def mstr1 MSlice(UInt8) = str;
# an MArray variable can be converted to an MSlice

const cstr = "Hello, world";
def mstr2 = cstr;  # this makes a writable copy 
def mstr3 MSlice(UInt8) = cstr; # Makes a writable copy
def mstr4 CSlice(UInt8) = cstr; # constant reference, no copy

def fn2(s MSlice(UInt8));
fn2("literal");  # makes a local copy at the scope of the function call

