
#{
	GUI
	Build and manage graphical user interfaces.
}

janus 1.0;

import gui.drawing;

# A default GUI Controller, with whatever the normal settings
# are.  Some implementations might also provide custom CreateControlerXXX
# functions that give more control over the connection.
#
def default_controller m_ref(m_Controller);


# a Controller is a connection to the graphics system.
# Typically a program will use default_controller.
#
# For things like remote desktop systems, it may be useful to create
# multiple Controllers that manage different displays.
#
# Some implementations will refuse to create more than one Controller at
# a time.
#
interface Controller
{
	# GetContentSize returns the available screen area for windows.
	#
	def GetContentSize() -> Rectangle;

	# Run with no parameters does not return until Break is called
	# even if all windows have been destroyed.
	#
	# Run(0.0) performs any pending GUI work and returns immediately.
	# A program that is doing a long calculation can do Run(0) occasionally
	# to prevent the GUI from freezing.
	#
	def Run() -> Void;
	def Run(seconds Real64) -> Void;

	# Break() can be called to make Run return
	# can be called from an event handler in an Element
	# or from another thread
	#
	def Break() -> Void;

	def Destroy() -> Void;
}

m_struct m_Controller implements Controller;
method m_Controller.CreateWindow() -> m_ref(MWindow);
method m_Controller.GetContentSize() -> Rectangle;
method m_Controller.Run() -> Void;
method m_Controller.Run(seconds Real64) -> Void;
method m_Controller.Break() -> Void;
method m_Controller.Destroy() -> Void;


interface Element
{
	def Destroy() -> Void;
	def Show() -> Void;
	def Hide() -> Void;
	def IsVisible() -> Bool;

	def SetOutsideSize(x0 Int32, y0, Int32, dx Int32, dy Int32) -> Void;
	def SetOutsideSize(rect Rectangle) -> Void;
	def GetOutsideSize() -> Rectangle;

	def GetContentSize() -> Rectangle;
	def GetParent() -> Element;
}

def CreateWindow(controller Controller) -> m_ref(m_Window);
interface Window extends Element
{
	def SetDecorations(x DecorationFlags) -> Void;
	def GetDecorations() -> DecorationFlags;

	def handle_resize function() -> Void;
	def handle_close function() -> Void;
}

def CreateMainMenu(window Window) -> m_ref(m_Menu);
def CreatePopupMenu(el Element) -> m_ref(m_Menu);
interface Menu
{
	def Destroy() -> Void;

	def AddSubmenu(icon gui.bitmap.Image, text String, state Int32) -> Menu;
	def AddItem(icon gui.bitmap.Image, text String, state Int32) -> MenuItem;
	def AddRule() -> MenuItem;
}

interface MenuItem
{
	def Destroy() -> Void;
	def SetState(state Int32) -> Void;
	def GetState() -> Int32;
	def GetIcon() -> gui.bitmap.Image;
	def GetText() -> String;

	def handle_select function(item MenuItem) -> Void;
}

# a region is an unstructured rectangle which receives events
# and can act as a drawing context.
#
def CreateRegion(window Window) -> m_ref(m_Region);
interface Region extends Element
{
	def handle_mouse_in function(x Int32, y Int32) -> Void;
	def handle_mouse_out function(x Int32, y Int32) -> Void;
	def handle_mouse_down function(x Int32, y Int32, btn Int32) -> Void;
	def handle_mouse_up function(x Int32, y Int32, btn Int32) -> Void;
	def handle_mouse_move function(x Int32, y Int32, btn Int32) -> Void;
	def handle_key_down function(keycode Int32, mods Int32) -> Void;
	def handle_key_up function(keycode Int32, mods Int32) -> Void;

	def SetCursorStyle(style CursorStyle) -> Void;
	def GetDrawingContext() -> gui.drawing.Context;
}

def CharFromKeycode(keycode Int32, mods Int32) -> Char;

m_struct Rectangle
{
	def x0 Int32;
	def y0 Int32;
	def dx Int32;
	def dy Int32;
}

alias DecorationFlags Int32;

const TITLE_DECORATION  DecorationFlags = 0x0001;
const CLOSE_DECORATION  DecorationFlags = 0x0002;
const RESIZE_DECORATION DecorationFlags = 0x0004;
const MENU_DECORATION   DecorationFlags = 0x0008;

alias CursorStyle Int32;
# FIXME what are standard cursor styles?

