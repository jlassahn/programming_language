
FILE:
	HEADER EOF
	HEADER FILE_CONTENT EOF

HEADER:
	janus VERSION ;
	janus VERSION { HEADER_OPTIONS }

HEADER_OPTIONS:
	# list of
	HEADER_OPTION;

HEADER_OPTION:
	DOT_SYMBOL = EXPRESSION

FILE_CONTENT:
	# list of
	FILE_DECLARATION

FILE_DECLARATION:
	IMPORT
	DEF
	STRUCT
	INTERFACE
	METHOD
	OPERATOR_DEF
	;

IMPORT:
	import DOT_SYMBOL ;
	import DOT_SYMBOL = . ;
	import DOT_SYMBOL = DOT_SYMBOL ;

DEF:
	def TOKEN FUNCTION_TYPE { FUNCTION_CONTENT }
	def TOKEN FUNCTION_TYPE = EXPRESSION ;
	def TOKEN FUNCTION_TYPE ;
	def TOKEN TYPE { FUNCTION_CONTENT }
	def TOKEN TYPE = EXPRESSION ;
	def TOKEN TYPE ;
	def TOKEN = EXPRESSION ;
	# these are permitted by the grammar, but useless and forbidden
	# by semantic constraints
	# def TOKEN { FUNCTION_CONTENT }
	# def TOKEN ;

STRUCT:
	struct TYPE_NAME { STRUCT_CONTENT }
	struct TYPE_NAME ;
	m_struct TYPE_NAME { STRUCT_CONTENT }
	m_struct TYPE_NAME ;

INTERFACE:
	interface TYPE_NAME { INTERFACE_CONTENT }
	interface TYPE_NAME extends EXTENDS_LIST { INTERFACE_CONTENT }

METHOD:
	method TYPE TOKEN FUNCTION_TYPE { FUNCTION_CONTENT }
	method TYPE TOKEN FUNCTION_TYPE = EXPRESSION ;
	method TYPE TOKEN FUNCTION_TYPE ;
	# FIXME is this permitted?
	# method TYPE TOKEN TYPE { FUNCTION_CONTENT }
	# e.g.
	# method MyType MyMethod function (x Integer) -> Integer;

OPERATOR_DEF:
	operator OPERATOR FUNCTION_TYPE { FUNCTION_CONTENT }
	operator OPERATOR FUNCTION_TYPE = EXPRESSION ;
	operator OPERATOR FUNCTION_TYPE ;

TYPE_NAME:
	# for declaring new struct and interface types
	# FIXME what kinds of things can be type parameters?
	#       definitely CType values,
	#       definitely numbers
	#       can't use things that aren't compile time constants
	#       is it useful to allow statically declared structs, references
	#       etc?  What about enums?
	TOKEN
	TOKEN ( PARAMETER_LIST )

FUNCTION_TYPE:
	( PARAMETER_LIST )
	( PARAMETER_LIST ) -> TYPE

PARAMETER_LIST:
	# comma separated list of
	TOKEN TYPE
	TOKEN > TYPE

TYPE:
	# not every expression can be a type, but because types can be
	# values of expressions and type names can look like other kinds of
	# symbols, this distinction must be made by semantic constraints
	#
	# TYPE is only a separate element in the grammar to clarify the
	# role of some expressions in definitions
	EXPRESSION


STRUCT_CONTENT:
	sequence of
	def TOKEN TYPE ;
	def TOKEN TYPE { FUNCTION_CONTENT }
	implements TOKEN ;
	implements TOKEN { IMPLEMENTS_CONTENT }

FUNCTION_CONTENT:
	sequence of
	DEF       # do we allow nested function definitions?
	while EXPRESSION { FUNCTION_CONTENT }
	if EXPRESSION { FUNCTION_CONTENT }
	if EXPRESSION { FUNCTION_CONTENT } ELSE
	for TOKEN in EXPRESSION { FUNCTION_CONTENT }
	return EXPRESSION ;
	return ;
	ASSIGNMENT_EXPRESSION ;
	EXPRESSION ;
	;

ELSE:
	else { FUNCTION_CONTENT }
	else if { FUNCTION_CONTENT }
	else if { FUNCTION_CONTENT } ELSE

INTERFACE_CONTENT:
	sequence of
	def TOKEN TYPE ;

METHOD:
	method TYPE . TOKEN TYPE ;
	method TYPE . TOKEN TYPE { FUNCTION_CONTENT }

OPERATOR_DEF:
	operator OPERATOR TYPE ;
	operator OPERATOR TYPE { FUNCTION_CONTENT }

DOT_SYMBOL:
	SYMBOL
	DOT_SYMBOL . SYMBOL

ASSIGNMENT_EXPRESSION:
	EXPRESSION = EXPRESSION
	EXPRESSION ASSIGN_OP EXPRESSION   #  +=  -=  *=  /=
	EXPRESSION POSTINCREMENT_OP       # ++  --

EXPRESSION:
	EXPRESSION_AND
	EXPRESSION OR_OP EXPRESSION_AND   # |  ^|

EXPRESSION_AND:
	EXPRESSION_COMPARE
	EXPRESSION_AND AND_OP EXPRESSION_COMPARE   #  &

EXPRESSION_COMPARE:
	EXPRESSION_ADD
	EXPRESSION_COMPARE COMPARE_OP EXPRESSION_ADD  # == != ~~ !~ <= >=

EXPRESSION_ADD:
	EXPRESSION_MULT
	EXPRESSION_ADD ADD_OP EXPRESSION_MULT  #  + -

EXPRESSION_MULT:
	EXPRESSION_EXP
	EXPRESSION_MULT MULT_OP EXPRESSION_EXP # * /  // +/ -/ %% +% -% << >>

EXPRESSION_EXP:
	EXPRESSION_PREFIX
	EXPRESSION_EXP EXP_OP EXPRESSION_PREFIX  # ^

EXPRESSION_PREFIX:
	EXPRESSION_SUFFIX
	PREFIX_OP EXPRESSION_PREFIX   # !

EXPRESSION_SUFFIX:
	( EXPRESSION )
	[ LIST_CONTENT ]
	{ MAP_CONTENT }
	DOT_SYMBOL
	NUMBER
	STRING
	CHARACTER
	function FUNCTION_TYPE
	EXPRESSION_SUFFIX SUFFIX_OP
	EXPRESSION_SUFFIX [ EXPRESSION ]
	EXPRESSION_SUFFIX ( LIST_CONTENT )

LIST_CONTENT:
	# comma separated list of
	EXPRESSION

MAP_CONTENT:
	# list of
	EXPRESSION = EXPRESSION ;

# FIXME expression operator precedence
# Dot for scope resolution and object dereference
# parentheses
# suffix operators and array derefs
# prefix operators
# exponents  ^
# multiply  * // / %%   << >>
# add + -
# comparison  ==  !=  !~  ~~ ...
# logical and   &
# logical or  | ^|



