
Goals

* familiar to C programmers
* good for "bare metal" programming, no runtime system requirements
* little or no hidden overhead, doesn't run a lot of implicit code
* get rid of the preprocessor
* code import system that's semantically simpler than #include
* order of global definitions and imports doesn't matter
* interface and implementation in separate files
* data hiding through interface files, not private keyword
* namespaces
* recommended consistent file organization, build procedure, package deployment
* clearer, easier to parse type syntax
* code can be parsed without a symbol table
* constants that are usable at compile time
* constant functions usable at compile time
* stricter enums, and different enum types


extensions for classes and templates
* maybe use type_name[param, param] for type parameters.
* static and file scope classes must have constant constructors
* a constant constructor has special permission to write to this
* possible syntaxes for constructors
	type variable = create(...);
	type variable.create(...);
	pointer type variable = allocate[type]().create(...);

