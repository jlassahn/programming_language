
FILE:
	HEADER FILE_ELEMENT*

FILE_ELEMENT:
	IMPORT_STATEMENT      // import ...
	USE_STATEMENT         // use ...
	EXTERNAL_DECLARATION  // (others)

EXTERNAL_DECLARATION:
	STRUCT_DECLARATION    // struct ...
	UNION_DECLARATION     // union ...
	ENUM_DECLARATION      // enum ...
	SYMBOL_DEFINITION     // (others)

STATEMENT:
	STRUCT_DECLARATION    // struct ...
	UNION_DECLARATION     // union ...
	ENUM_DECLARATION      // enum ...
	COMPOUND_STATEMENT    // { ...
	FOR_STATEMENT
	WHILE_STATEMENT
	DO_STATEMENT
	IF_STATEMENT
	SWITCH_STATEMENT
	WHILE_STATEMENT
	BREAK_STATEMENT
	CONTINUE_STATEMENT
	GOTO_STATEMENT
	RETURN_STATEMENT
	;
	EXPRESSION_STATEMENT  // EXPRESSION ;
	LABELED_STATEMENT     // EXPRESSION : ...
	SYMBOL_DEFINITION     // EXPRESSION IDENTIFIER ...
	                      // STORAGE_SPECIFIER ...

EXPRESSION_STATEMENT:
	EXPRESSION ;

LABELED_STATEMENT:
	IDENTIFIER : STATEMENT
	case EXPRESSION : STATEMENT
	default : STATEMENT

SYMBOL_DEFINITION:
	STORAGE_SPECIFIER TYPE IDENTIFIER FUNCTION_OR_VARIABLE_TAIL
	TYPE IDENTIFIER FUNCTION_OR_VARIABLE_TAIL

FUNCTION_OR_VARIABLE_TAIL:
	( PARAMETER_LIST ) FUNCTION_PROPERTIES ;
	( PARAMETER_LIST ) FUNCTION_PROPERTIES COMPOUND_STATEMENT
	;
	= INITIALIZER ;
	= COMPOUND_INITIALIZER ;

TYPE:
	TYPE_MODIFIERS* BASE_TYPE

STORGE_SPECIFIER:
	constant
	typedef
	register
	static
	auto
	restrict

TYPE_MODIFIERS:
	pointer
	array ( ARRAY_SIZE )
	readonly
	volatile

BASE_TYPE:
	NAMESPACED_IDENTIFIER

EXPRESSION:

